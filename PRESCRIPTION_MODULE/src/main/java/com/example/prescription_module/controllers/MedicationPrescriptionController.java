package com.example.prescription_module.controllers;import com.example.prescription_module.domain.MedicationPrescription;import com.example.prescription_module.services.MedicationPrescriptionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/medication-prescriptions")public class MedicationPrescriptionController {    private final MedicationPrescriptionService medicationPrescriptionService;    @Autowired    public MedicationPrescriptionController(MedicationPrescriptionService medicationPrescriptionService) {        this.medicationPrescriptionService = medicationPrescriptionService;    }    @GetMapping("/")    public ResponseEntity<List<MedicationPrescription>> getAllMedicationPrescriptions() {        return ResponseEntity.ok(medicationPrescriptionService.findAll());    }    @GetMapping("/{id}")    public ResponseEntity<MedicationPrescription> getMedicationPrescriptionById(@PathVariable Long id) {        return medicationPrescriptionService.findById(id)                .map(ResponseEntity::ok)                .orElseGet(() -> ResponseEntity.notFound().build());    }    @PostMapping("/")    public ResponseEntity<MedicationPrescription> createMedicationPrescription(@RequestBody MedicationPrescription medicationPrescription) {        return ResponseEntity.ok(medicationPrescriptionService.save(medicationPrescription));    }    @PutMapping("/{id}")    public ResponseEntity<MedicationPrescription> updateMedicationPrescription(@PathVariable Long id, @RequestBody MedicationPrescription medicationPrescription) {        medicationPrescription.setId(id);        return ResponseEntity.ok(medicationPrescriptionService.update(medicationPrescription));    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteMedicationPrescription(@PathVariable Long id) {        medicationPrescriptionService.delete(id);        return ResponseEntity.noContent().build();    }}